import java.io.*;
import java.util.*;

public class LearningPlatform {

    // Model class for User
    static class User implements Serializable {
        private String username;
        private String password;
        private List<String> completedCourses;
        private List<String> preferredTopics;

        public User(String username, String password) {
            this.username = username;
            this.password = password;
            this.completedCourses = new ArrayList<>();
            this.preferredTopics = new ArrayList<>();
        }

        public String getUsername() {
            return username;
        }

        public String getPassword() {
            return password;
        }

        public List<String> getCompletedCourses() {
            return completedCourses;
        }

        public List<String> getPreferredTopics() {
            return preferredTopics;
        }

        public void addCompletedCourse(String course) {
            this.completedCourses.add(course);
        }

        public void addPreferredTopic(String topic) {
            this.preferredTopics.add(topic);
        }
    }

    // Model class for Course
    static class Course implements Serializable {
        private String courseName;
        private String description;
        private String topic;

        public Course(String courseName, String description, String topic) {
            this.courseName = courseName;
            this.description = description;
            this.topic = topic;
        }

        public String getCourseName() {
            return courseName;
        }

        public String getTopic() {
            return topic;
        }

        @Override
        public String toString() {
            return courseName + " - " + description;
        }
    }

    // Simple AI-based Recommendation
    static class AIRecommendation {

        public static List<Course> recommendCourses(User user, List<Course> allCourses) {
            List<Course> recommendedCourses = new ArrayList<>();
            for (Course course : allCourses) {
                if (user.getPreferredTopics().contains(course.getTopic())) {
                    recommendedCourses.add(course);
                }
            }
            return recommendedCourses;
        }
    }

    // File operations (Data Storage)
    static class DataStorage {

        private static final String USERS_FILE = "users.dat";
        private static final String COURSES_FILE = "courses.dat";

        public static void saveUsers(List<User> users) {
            try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(USERS_FILE))) {
                out.writeObject(users);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public static List<User> loadUsers() {
            try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(USERS_FILE))) {
                return (List<User>) in.readObject();
            } catch (IOException | ClassNotFoundException e) {
                return new ArrayList<>();
            }
        }

        public static void saveCourses(List<Course> courses) {
            try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(COURSES_FILE))) {
                out.writeObject(courses);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public static List<Course> loadCourses() {
            try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(COURSES_FILE))) {
                return (List<Course>) in.readObject();
            } catch (IOException | ClassNotFoundException e) {
                return new ArrayList<>();
            }
        }
    }

    // Main class to interact with the platform
    public static class Main {
        private static List<User> users = DataStorage.loadUsers();
        private static List<Course> courses = DataStorage.loadCourses();

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Welcome to the AI-powered Learning Platform!");

            while (true) {
                System.out.println("\n1. Register");
                System.out.println("2. Login");
                System.out.println("3. View Courses");
                System.out.println("4. Recommend Courses");
                System.out.println("5. Exit");
                System.out.print("Choose an option: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (choice) {
                    case 1:
                        register(scanner);
                        break;
                    case 2:
                        login(scanner);
                        break;
                    case 3:
                        viewCourses();
                        break;
                    case 4:
                        recommendCourses(scanner);
                        break;
                    case 5:
                        DataStorage.saveUsers(users);
                        DataStorage.saveCourses(courses);
                        System.out.println("Goodbye!");
                        return;
                }
            }
        }

        private static void register(Scanner scanner) {
            System.out.print("Enter username: ");
            String username = scanner.nextLine();
            System.out.print("Enter password: ");
            String password = scanner.nextLine();

            User newUser = new User(username, password);
            users.add(newUser);
            DataStorage.saveUsers(users);
            System.out.println("Registration successful!");
        }

        private static void login(Scanner scanner) {
            System.out.print("Enter username: ");
            String username = scanner.nextLine();
            System.out.print("Enter password: ");
            String password = scanner.nextLine();

            User user = findUser(username, password);
            if (user != null) {
                System.out.println("Login successful!");
                handleUserProfile(scanner, user);
            } else {
                System.out.println("Invalid username or password!");
            }
        }

        private static User findUser(String username, String password) {
            for (User user : users) {
                if (user.getUsername().equals(username) && user.getPassword().equals(password)) {
                    return user;
                }
            }
            return null;
        }

        private static void handleUserProfile(Scanner scanner, User user) {
            while (true) {
                System.out.println("\n1. View completed courses");
                System.out.println("2. Add a preferred topic");
                System.out.println("3. Log out");
                System.out.print("Choose an option: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (choice) {
                    case 1:
                        viewCompletedCourses(user);
                        break;
                    case 2:
                        addPreferredTopic(user, scanner);
                        break;
                    case 3:
                        return;
                }
            }
        }

        private static void viewCompletedCourses(User user) {
            System.out.println("Completed courses:");
            for (String course : user.getCompletedCourses()) {
                System.out.println(course);
            }
        }

        private static void addPreferredTopic(User user, Scanner scanner) {
            System.out.print("Enter a preferred topic: ");
            String topic = scanner.nextLine();
            user.addPreferredTopic(topic);
            System.out.println("Preferred topic added!");
        }

        private static void viewCourses() {
            System.out.println("Available courses:");
            for (Course course : courses) {
                System.out.println(course);
            }
        }

        private static void recommendCourses(Scanner scanner) {
            System.out.print("Enter your username to get recommendations: ");
            String username = scanner.nextLine();
            User user = findUser(username, null);

            if (user != null) {
                List<Course> recommendedCourses = AIRecommendation.recommendCourses(user, courses);
                if (recommendedCourses.isEmpty()) {
                    System.out.println("No recommendations available.");
                } else {
                    System.out.println("Recommended courses:");
                    for (Course course : recommendedCourses) {
                        System.out.println(course);
                    }
                }
            } else {
                System.out.println("User not found.");
            }
        }
    }

    public static void main(String[] args) {
        // Initialize some courses
        List<Course> courses = new ArrayList<>();
        courses.add(new Course("Java Programming", "Learn the basics of Java.", "Programming"));
        courses.add(new Course("Machine Learning", "Intro to machine learning concepts.", "AI"));
        courses.add(new Course("Data Structures", "Learn data structures and algorithms.", "Programming"));
        DataStorage.saveCourses(courses);

        // Start the platform
        Main.main(args);
    }
}

